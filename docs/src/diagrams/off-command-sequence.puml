@startuml
'https://plantuml.com/sequence-diagram
skinparam backgroundColor #EEEBDC
skinparam sequence {
ParticipantBorderColor DodgerBlue
ParticipantBackgroundColor DeepSkyBlue
ActorBorderColor DarkGreen
ActorBackgroundColor Green
BoxBorderColor LightBlue
BoxBackgroundColor #F0FFFF
}
skinparam collections {
  BackGroundColor LightBlue
  BorderColor DodgerBlue
}
skinparam database {
  BackgroundColor LightGreen
  BorderColor DarkGreen
}
title Off Command Sequence - Correlation\n
participant "CSP_Mid\n.LMC" as lmc #Thistle
box "\nMCS\n"
  participant "Mid.CBF\nController" as controller
  participant "Mid.CBF\nSubarray" as subarray
  participant "Talon\nBoard" as talon_board
  participant "Talon\nLRU" as lru
  participant "Talon\nDX" as tdx
  participant "Power\nSwitch" as ps
  collections "SLIM\n" as slim
  collections "SLIM\nLink" as slimlink
end box
participant "PDU\n" as pdu #Orange
box "\nHPS\n"
  participant "Linux\nOS" as os #LightGreen
  participant "HPS\nMaster" as hpsmaster
  collections "HPS\nDevices" as hpsdevices
end box

lmc -> controller : Off()

group #LightCyan For each subarray:
group #SeaShell If ObsState == RESOURCING, RESTARTING, ABORTING,\n                      READY, RESETTING, SCANNING:
controller -> subarray        : Abort
end

controller -> subarray        : Restart
note over subarray            : ObsState: EMPTY
end loop

group #LightCyan For each SLIM:
  controller ->  slim         : Off

  group #LightCyan For each active SlimLink:
    slim      ->  slimlink    : Stop polling VerifyConnection()
    slim      ->  slimlink    : DisconnectTxRx()
    slimlink  ->  hpsdevices  : InitializeConnection(serial_loopback=True)
  end 
  note over slim              : OpState: OFF
end group

note over talon_board          : OpState: UNKNOWN
controller  ->  tdx            : Shutdown()
tdx         ->  hpsmaster      : Shutdown(3)
hpsmaster   ->  hpsdevices !!  : kill pid
hpsmaster   ->  os !!          : system "shutdown now"
tdx         ->  tdx            : sleep(4s)

group #LightCyan For each Talon LRU in configuration:
  controller    ->  lru         : Off()
  lru           ->  ps          : outlet1_state = GetOutletPowerState(outlet1)
  ps            ->  pdu         : GetOutletPowerState(outlet1)
  group #SeaShell If using_single_outlet == True:
    lru         ->  lru         : outlet2_state = outlet1_state
    else
    lru         ->  ps          : outlet2_state = GetOutletPowerState(outlet2)
    ps          ->  pdu         : GetOutletPowerState(outlet2)
  end group

  note over lru                 : OpState: UNKNOWN
  group #SeaShell If outlet1_state OR outlet2_state == ON:
    note over lru               : OpState: ON
  else If outlet1_state AND outlet2_state == OFF:
    note over lru               : OpState: OFF
  end group

  lru           ->  ps          : TurnOffOutlet(outlet1)
  ps            ->  pdu         : TurnOffOutlet(outlet1)
  group #SeaShell If using_single_outlet == False:
    lru         ->  ps          : TurnOffOutlet(outlet2)
    ps          ->  pdu         : TurnOffOutlet(outlet2)
  end group
end group

note over controller           : OpState: OFF
lmc        <--  controller     : Success

@enduml
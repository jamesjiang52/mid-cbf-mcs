@startuml
'https://plantuml.com/sequence-diagram

skinparam backgroundColor #EEEBDC
skinparam sequence {
ParticipantBorderColor DodgerBlue
ParticipantBackgroundColor DeepSkyBlue
ActorBorderColor DarkGreen
ActorBackgroundColor Green
BoxBorderColor LightBlue
BoxBackgroundColor #F0FFFF
}

title MCS Correlation Configure Scan\n

participant "TMC\n" as tmc #SandyBrown
participant "CSP_Mid\n.LMC" as lmc #Thistle

box "MCS"
participant "Mid.CBF\nController" as controller
participant "Mid.CBF\nSubarray" as subarray
participant "VCC\n" as vcc
participant "FSP\n" as fsp
participant "FSP Corr\nSubarray" as fspcorr
participant "Visibility\nTransport" as vis_trans
end box

box "HPS\nDevices" 
participant "VCC\nController" as vcc_cont
participant "VCC\nBand" as vcc_band
participant "FSP\nController" as fsp_cont
participant "FSP Corr\nController" as fspcorr_cont
end box

lmc         -> subarray     : ConfigureScan(json_str)
subarray    -> subarray     : validate JSON\nagainst schema

group #LightCyan For each FSP:
    subarray    -> fsp          : RemoveSubarrayMembership
    note over fsp               : FunctionMode == IDLE
end group

group #LemonChiffon Delay model subscription point
    subarray    -> tmc          : Unsubscribe all events
end group

subarray    -> subarray     : clear old\nconfiguration
subarray    -> subarray     : load new\nconfiguration

group #LemonChiffon Delay model subscription point
    subarray    -> tmc          : subscribe delay model
end group

group  *See next diagram for more detail

    group #LightCyan For each assigned receptor:
        subarray    -> vcc          : ConfigureBand(json_str)
        vcc         -> vcc          : load band\nconfiguration
        vcc         -> vcc_cont     : ConfigureBand(int)
        vcc         -> vcc_band     : SetInternalParameters(json_str)
        subarray   <-- vcc          : Success
        subarray    -> vcc          : ConfigureScan(json_str)
        vcc         -> vcc          : load scan\nconfiguration
        vcc         -> vcc_band     : ConfigureScan(json_str)
        note over vcc               : ObsState == READY
        subarray   <-- vcc          : Success
    end group

end group

group #LightCyan For each FSP to configure:
    subarray    -> subarray     : build FSP\nconfiguration

    group #SeaShell If FunctionMode == IDLE:
        subarray    -> fsp          : SetFunctionMode(str)
        fsp         -> fsp          : validate\nfunction mode
        fsp         -> fsp_cont     : SetFunctionMode(int)
    end group

    subarray    -> fsp          : AddSubarrayMembership(int)
    fsp         -> fsp          : validate\nsubarray ID
    fsp         -> fspcorr      : corr subarray ONLINE
    fsp         -> fsp          : Update\nSubarrayMembership

    subarray    -> subarray     : set 'corr_vcc_ids'\nconfiguration property
    subarray    -> fspcorr      : ConfigureScan(json_str)
    fspcorr     -> fspcorr      : reset old configuration,\nrelease all VCCs,\nload FSP configuration,\nassign new VCCs,\nbuild FSP CORR configuration
    fspcorr     -> fspcorr_cont : ConfigureScan(json_str)
    note over fspcorr           : ObsState == READY
end group

subarray   <-- fspcorr      : Success

group #SeaShell If FSP ConfigureScan fails:
    subarray    -> subarray     : Reset all assigned\nFSP devices
    lmc         <-- subarray    : Failure
end group

subarray    -> vis_trans    : Configure(json_str, yaml_str)
subarray   <-- vis_trans    : Success

note over subarray          : ObsState == READY
lmc        <-- subarray     : Success

@enduml
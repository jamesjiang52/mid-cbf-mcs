from __future__ import annotations

import json
import re
from typing import Any, List

import requests

from pysnmp import error as snmp_error
from pysnmp.entity.rfc3413.oneliner import cmdgen
from pysnmp.hlapi import (  # noqa: F401
    ContextData,
    ObjectIdentity,
    ObjectType,
    SnmpEngine,
    UdpTransportTarget,
    UsmUserData,
    getCmd,
    setCmd,
    usmHMACMD5AuthProtocol,
    usmNoPrivProtocol,
)
from pysnmp.proto import rfc1902

__all__ = ["MockResponseSNMP"]


class MockResponseSNMP:
    """A mock class to replace requests.Response."""

    def __init__(
        self: MockResponseSNMP,
        simulate_response_error: bool,
        sim_state: bool,
    ) -> None:
        """
        Initialise a new instance.

        :param url: URL of the request
        :param simulate_response_error: set to True to simulate error response
        """

        self._json: List[dict[str, Any]] = []
        
        # Would need to parametrize for this logic in the MockResponse constructor
        # These state code work for st switch 2 driver, hard written
        sim_state = 1 if sim_state else 2

        if simulate_response_error:
            self.status_code = 404
        else:
            self.status_code = requests.codes.ok

            for i in range(1, 25):
                outlet_cfg = {
                    "name": f"Outlet {i}",
                    "locked": False,
                    "critical": False,
                    "cycle_delay": 0,
                    "state": sim_state,
                    "physical_state": True,
                    "transient_state": True,
                    "varBinds": (None, sim_state)
                }

                self._json.append(outlet_cfg)
                self.text = json.dumps(self._json)

    def json(self: MockResponseSNMP) -> dict[str, Any]:
        """
        Replace the patched :py:meth:`request.Response.json` with mock.

        This implementation always returns the same key-value pairs.

        :return: representative JSON reponse as the power switch when
                    querying the outlets page
        """

        return self._json
